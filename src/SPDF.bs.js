// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Promise from "@ryyppy/rescript-promise/src/Promise.bs.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.bs.js";
import * as Webapi__Dom__HtmlElement from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__HtmlElement.bs.js";
import * as VirtualizedList$RescriptSimplePdf from "./VirtualizedList.bs.js";

var spfdId = "spdf-Id";

var canvasClassName = "pdf-canvas";

function downloadPDF(url) {
  return window.pdfjsLib.getDocument(url).promise;
}

function createCanvas(id) {
  var canvas = document.createElement("canvas");
  canvas.setAttribute(spfdId, String(id));
  canvas.className = canvasClassName;
  return canvas;
}

function setCanvasSize(width, height, canvas) {
  canvas.setAttribute("width", String(width));
  canvas.setAttribute("height", String(height));
  return canvas;
}

function getRenderContext(viewport, canvas) {
  var canvasContext = canvas.getContext("2d");
  return {
          canvas: canvas,
          canvasContext: canvasContext,
          viewport: viewport
        };
}

function getDivWidth(root) {
  var wrapperComputedStyle = window.getComputedStyle(root);
  var left = Belt_Option.getExn(Belt_Float.fromString(wrapperComputedStyle.paddingLeft));
  var right = Belt_Option.getExn(Belt_Float.fromString(wrapperComputedStyle.paddingRight));
  return root.clientWidth - left - right;
}

function getSize(root, page) {
  var width = getDivWidth(root);
  var scale = width / page.getViewport({
        scale: 1.0
      }).width;
  var viewport = page.getViewport({
        scale: scale
      });
  return {
          scale: scale,
          width: viewport.width,
          height: viewport.height,
          viewport: viewport
        };
}

function setScale(el, scale) {
  Belt_Option.getExn(Webapi__Dom__HtmlElement.ofElement(el)).style.setProperty("transform-origin", "0 0");
  Belt_Option.getExn(Webapi__Dom__HtmlElement.ofElement(el)).style.setProperty("transform", "scale(" + String(scale) + ")");
  return el;
}

function setWillChange(el, value) {
  var style = Belt_Option.getExn(Webapi__Dom__HtmlElement.ofElement(el)).style;
  if (value) {
    style.setProperty("will-change", "auto");
  } else {
    style.removeProperty("will-change");
  }
  return el;
}

function initPages(pdf) {
  return Promise.all(Belt_Array.makeBy(pdf.numPages, (function (i) {
                    return pdf.getPage(i + 1 | 0);
                  })));
}

function getId(el) {
  return Belt_Option.flatMap(Caml_option.nullable_to_opt(el.getAttribute("v-id")), Belt_Int.fromString);
}

function makeView(root, id, page) {
  var match = getSize(root, page);
  return {
          page: page,
          scale: match.scale,
          width: match.width,
          height: match.height,
          viewport: match.viewport,
          id: id
        };
}

function makeViewList(pdfArray, root) {
  return Belt_Array.mapWithIndexU(pdfArray, (function (index, page) {
                return makeView(root, index, page);
              }));
}

async function make(url, root) {
  var pdf = await downloadPDF(url);
  var pageList = await initPages(pdf);
  var pdfViewList = {
    contents: makeViewList(pageList, root)
  };
  var rerenderTimer = {
    contents: undefined
  };
  var getView = function (el) {
    var id = getId(el);
    if (id !== undefined) {
      return Belt_Array.get(pdfViewList.contents, id);
    }
    
  };
  var renderPDF = function (el) {
    return Belt_Option.flatMap(getView(el), (function (view) {
                  var rect = el.getBoundingClientRect();
                  var page = view.page;
                  var width = rect.width;
                  var height = rect.height;
                  var canvas = setCanvasSize(width, height, createCanvas(view.id));
                  var renderContext = getRenderContext(view.viewport, canvas);
                  page.cleanupAfterRender = true;
                  var task = page.render(renderContext);
                  $$Promise.$$catch(task.promise.then(function (param) {
                            ((el.replaceChildren(canvas)));
                          }), (function (_e) {
                          return Promise.resolve(undefined);
                        }));
                  return task;
                }));
  };
  var removePDF = function (el) {
    ((el.replaceChildren()));
    var view = Belt_Option.getExn(getView(el));
    view.page._destroy();
    view.page.cleanup();
    return el;
  };
  var onVisible = function (el) {
    renderPDF(el);
  };
  var onHidden = function (el) {
    removePDF(el);
  };
  var onResize = function (el) {
    setWillChange(el, true);
    var canvasParentList = Belt_Array.mapU(Array.prototype.slice.call(el.querySelectorAll("." + canvasClassName)), (function (canvas) {
            var parentNode = Belt_Option.getExn(Caml_option.nullable_to_opt(canvas.parentElement));
            var divWidth = parentNode.getBoundingClientRect().width;
            var canvasWidth = Belt_Option.getExn(Belt_Option.flatMap(Belt_Option.flatMap(Webapi__Dom__Element.ofNode(canvas), (function (__x) {
                            return Caml_option.nullable_to_opt(__x.getAttribute("width"));
                          })), Belt_Float.fromString));
            var scale = divWidth / canvasWidth;
            setScale(Belt_Option.getExn(Webapi__Dom__Element.ofNode(canvas)), scale);
            return parentNode;
          }));
    Belt_Array.forEachWithIndexU(Array.prototype.slice.call(el.querySelectorAll("." + VirtualizedList$RescriptSimplePdf.divClassName)), (function (i, div) {
            var view = Belt_Option.getExn(Belt_Option.flatMap(Webapi__Dom__Element.ofNode(div), getView));
            var result = makeView(el, i, view.page);
            Belt_Array.setExn(pdfViewList.contents, i, result);
          }));
    var timerId = rerenderTimer.contents;
    if (timerId !== undefined) {
      clearTimeout(Caml_option.valFromOption(timerId));
    }
    rerenderTimer.contents = Caml_option.some(setTimeout((function (param) {
                Belt_Array.forEachU(canvasParentList, (function (div) {
                        renderPDF(div);
                      }));
                setWillChange(el, false);
              }), 300));
  };
  return VirtualizedList$RescriptSimplePdf.make(root, pdfViewList.contents, onVisible, onHidden, onResize);
}

export {
  spfdId ,
  canvasClassName ,
  downloadPDF ,
  createCanvas ,
  setCanvasSize ,
  getRenderContext ,
  getDivWidth ,
  getSize ,
  setScale ,
  setWillChange ,
  initPages ,
  getId ,
  makeView ,
  makeViewList ,
  make ,
}
/* Webapi__Dom__Element Not a pure module */
