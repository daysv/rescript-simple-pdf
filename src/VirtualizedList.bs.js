// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.bs.js";
import * as Utils$RescriptSimplePdf from "./Utils.bs.js";
import * as Webapi__Dom__HtmlElement from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__HtmlElement.bs.js";

var divClassName = "pdf-page";

var divId = "v-id";

function makeVisibleObserver(onVisible, onHidden, dom) {
  var handler = function (entries, _observer) {
    Belt_Array.forEachU(entries, (function (entry) {
            var target = entry.target;
            if (entry.isIntersecting) {
              onVisible(target);
            } else {
              onHidden(target);
            }
          }));
  };
  var parentElement = Utils$RescriptSimplePdf.FindParentScroller.make(Caml_option.some(dom));
  var marginHeight = parentElement.clientHeight / 2 | 0;
  var marginHeight$1 = String(marginHeight);
  var config = {
    root: parentElement,
    rootMargin: "" + marginHeight$1 + "px 0px " + marginHeight$1 + "px 0px"
  };
  return new IntersectionObserver(handler, config);
}

function setDomSize(width, height, dom) {
  var style = Belt_Option.getExn(Webapi__Dom__HtmlElement.ofElement(dom)).style;
  style.setProperty("width", String(width) + "px");
  style.setProperty("height", String(height) + "px");
  style.setProperty("overflow", "hidden");
  return style;
}

function makeResizeObserver(onResize) {
  return new ResizeObserver((function (entries) {
                Belt_Array.forEach(entries, (function (entry) {
                        var contentRect = entry.contentRect;
                        var target = entry.target;
                        var rootWidth = contentRect.width;
                        Belt_Array.forEachU(Array.prototype.slice.call(target.querySelectorAll("." + divClassName)), (function (el) {
                                var style = Belt_Option.getExn(Belt_Option.flatMap(Webapi__Dom__Element.ofNode(el), Webapi__Dom__HtmlElement.ofElement)).style;
                                var width = Belt_Option.getExn(Belt_Float.fromString(style.width));
                                var height = Belt_Option.getExn(Belt_Float.fromString(style.height));
                                var scale = width / rootWidth;
                                var height$1 = height / scale;
                                setDomSize(rootWidth, height$1, Belt_Option.getExn(Webapi__Dom__Element.ofNode(el)));
                              }));
                        onResize(target);
                      }));
              }));
}

function createDiv(width, height, id) {
  var div = document.createElement("div");
  setDomSize(width, height, div);
  div.setAttribute(divId, id);
  div.className = divClassName;
  return div;
}

function make(dom, list, onVisible, onHidden, onResize) {
  var visibleObserver = makeVisibleObserver(onVisible, onHidden, dom);
  var resizeObserver = makeResizeObserver(onResize);
  var root = document.createElement("div");
  Belt_Array.mapWithIndexU(list, (function (index, item) {
          var div = createDiv(item.width, item.height, String(index));
          visibleObserver.observe(div);
          root.appendChild(div);
        }));
  dom.appendChild(root);
  resizeObserver.observe(dom);
  return {
          visibleObserver: visibleObserver,
          resizeObserver: resizeObserver,
          dom: dom,
          root: root
        };
}

function destroy(param) {
  param.visibleObserver.disconnect();
  param.resizeObserver.disconnect();
  return param.dom.removeChild(param.root);
}

export {
  divClassName ,
  divId ,
  makeVisibleObserver ,
  setDomSize ,
  makeResizeObserver ,
  createDiv ,
  make ,
  destroy ,
}
/* Webapi__Dom__Element Not a pure module */
